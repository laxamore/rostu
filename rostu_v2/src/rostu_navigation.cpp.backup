#include <iostream>
#include <fstream>

#include <ros/ros.h>

#include <tf/transform_broadcaster.h>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Odometry.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <actionlib_msgs/GoalStatusArray.h>
#include <actionlib_msgs/GoalID.h>
#include <rostu_v2/BallCoor.h>
#include <rostu_v2/Dribling.h>
#include <rostu_v2/Kicker.h>
#include <std_msgs/Float32.h>

#define PI 3.14159265358979323846

using namespace std;

double x;
double y;
double th = 0;

double vx;
double vy;
double vth;

double dt;
double delta_x;
double delta_y;
double delta_th;

bool ball_detect, got_ball;
double ball_distance_from_frame = 200;
double ball_angle_from_frame;
double kicker_volt;

geometry_msgs::Twist rostu_cmdvel;
geometry_msgs::Twist cmdvel;
rostu_v2::Dribling dribling;
rostu_v2::Kicker kicker_msg;
geometry_msgs::Quaternion robot_orientation;
geometry_msgs::PoseStamped goal_publish_msg;
actionlib_msgs::GoalID cancel_goal_msg;

ros::Publisher cancel_goal_pub;
ros::Publisher publish_goal;

ros::Time current_time, last_time, counter;

double kp = 0.05, kd = 0.03;
double setpoint = 0.0;
double error;
double P_Value;
double D_Value;
double PD_Value;
double lastError;

double robot_center_pose_x, robot_center_pose_y, robot_angle;
double robot_end_pose_x, robot_end_pose_y;
double goal_point_x = 9.75, goal_point_y = 3.875;
double robot_angle_from_goal;
int robot_status = 3, robot_find_ball_pose = 0;

double PD_Controller(double th) {
  error = th;
  P_Value = kp * error;
  D_Value = (lastError - error) * kd;
  PD_Value = P_Value + D_Value;
  lastError = error;

  return PD_Value;
}

void cmd_vel_callback(const geometry_msgs::Twist& msg) {
  vx = msg.linear.x;
  vy = msg.linear.y;
  vth = msg.angular.z;

  delta_x = (vx * cos(th) - vy * sin(th)) * dt;
  delta_y = (vx * sin(th) + vy * cos(th)) * dt;
  delta_th = vth * dt;

  x += delta_x;
  y += delta_y;
  th += delta_th;

  delta_x = 0;
  delta_y = 0;
  delta_th = 0;

  rostu_cmdvel = msg;
}

void ball_coor_callback(const rostu_v2::BallCoor& msg) {
  ball_detect = msg.ball_detect;
  ball_distance_from_frame = msg.distance;
  ball_angle_from_frame = msg.angle;

  if (ball_angle_from_frame < 5 && ball_angle_from_frame > -5) {
    ball_angle_from_frame = 0;
  }

  if (ball_distance_from_frame < 50) {
    dribling.d1pwm1 = 200;
    dribling.d1pwm2 = 0;
    dribling.d2pwm1 = 200;
    dribling.d2pwm2 = 0;
  }
  else {
    dribling.d1pwm1 = 0;
    dribling.d1pwm2 = 0;
    dribling.d2pwm1 = 0;
    dribling.d2pwm2 = 0;
  }
}

void dribling_callback(const rostu_v2::Dribling& msg) {
  got_ball = msg.got_ball;
}

void kicker_callback(const rostu_v2::Kicker& msg) {
  kicker_volt = msg.cap_volt;
  kicker_msg.cap_volt = kicker_volt;
}

void amcl_pose_callback(const geometry_msgs::PoseWithCovarianceStamped& msg) {
  robot_center_pose_x = msg.pose.pose.position.x;
  robot_center_pose_y = msg.pose.pose.position.y;
  robot_orientation = msg.pose.pose.orientation;
  robot_angle = tf::getYaw(robot_orientation);
  robot_end_pose_x = robot_center_pose_x - sin(robot_angle) * 0.25;
  robot_end_pose_y = robot_center_pose_y - cos(robot_angle) * 0.25;
  double angle = atan2(robot_center_pose_y - robot_end_pose_y, robot_center_pose_x - robot_end_pose_x) - atan2(goal_point_x - robot_center_pose_x, goal_point_y - robot_center_pose_y);
  robot_angle_from_goal = angle * 360 / (2 * PI);
  if (robot_angle_from_goal < 10 && robot_angle_from_goal > -10) {
    robot_angle_from_goal = 0;
  }
}

void move_base_status_callback(const actionlib_msgs::GoalStatusArray& msg) {
  if (msg.status_list.size() > 0) {
    int msg_size = msg.status_list.size();
    robot_status = msg.status_list[msg_size - 1].status;
  }

  if (!ball_detect) {
    if (robot_status == 3 || robot_status == 2) {
      if ((current_time - counter).toSec() > 1.5) {
        goal_publish_msg.header.frame_id = "map";
        if (robot_find_ball_pose == 0) {
          goal_publish_msg.pose.position.x = 3;
          goal_publish_msg.pose.position.y = 3.75;
          goal_publish_msg.pose.orientation.w = 1.0;
        }
        else if (robot_find_ball_pose == 1) {
          goal_publish_msg.pose.position.x = 5.25;
          goal_publish_msg.pose.position.y = 6.125;
          goal_publish_msg.pose.orientation.w = 1.0;
        }
        else if (robot_find_ball_pose == 2) {
          goal_publish_msg.pose.position.x = 7.5;
          goal_publish_msg.pose.position.y = 3.75;
          goal_publish_msg.pose.orientation.w = 1.0;
        }
        else if (robot_find_ball_pose == 3) {
          goal_publish_msg.pose.position.x = 5.25;
          goal_publish_msg.pose.position.y = 1.375;
          goal_publish_msg.pose.orientation.w = 1.0;
        }
        robot_find_ball_pose++;
        publish_goal.publish(goal_publish_msg);
      }
    }
    else {
      counter = ros::Time::now();
    }
  }
  else if (ball_detect && robot_status == 1) {
    cancel_goal_pub.publish(cancel_goal_msg);
  }

  if (robot_find_ball_pose > 3) {
    robot_find_ball_pose = 0;
  }
}

int main(int argc, char* argv[]) {
  ros::init(argc, argv, "rostu_navigation");
  ros::NodeHandle nh;
  ros::Subscriber sub1 = nh.subscribe("cmd_vel", 1, cmd_vel_callback);
  ros::Subscriber sub2 = nh.subscribe("rostu/ball_coor", 1, ball_coor_callback);
  ros::Subscriber sub3 = nh.subscribe("rostu/dribling", 1, dribling_callback);
  ros::Subscriber sub4 = nh.subscribe("rostu/kicker", 1, kicker_callback);
  ros::Subscriber sub5 = nh.subscribe("amcl_pose", 1, amcl_pose_callback);
  ros::Subscriber sub6 = nh.subscribe("move_base/status", 1, move_base_status_callback);
  ros::Publisher nav_odom = nh.advertise<nav_msgs::Odometry>("odom", 1);
  ros::Publisher cmd_vel = nh.advertise<geometry_msgs::Twist>("cmd_vel", 1);
  ros::Publisher rostu_vel = nh.advertise<geometry_msgs::Twist>("rostu/cmd_vel", 1);
  ros::Publisher dribling_pub = nh.advertise<rostu_v2::Dribling>("rostu/dribling", 1);
  ros::Publisher kicker_pub = nh.advertise<rostu_v2::Kicker>("rostu/kicker", 1);
  cancel_goal_pub = nh.advertise<actionlib_msgs::GoalID>("/move_base/cancel", 1);
  publish_goal = nh.advertise<geometry_msgs::PoseStamped>("/move_base_simple/goal", 1);

  ros::Rate r(30);

  tf::TransformBroadcaster bll_broadcaster;
  tf::TransformBroadcaster bl_broadcaster;
  tf::TransformBroadcaster bf_broadcaster;

  x = 0.0;
  y = 0.0;
  th = 0.0;

  current_time = ros::Time::now();
  last_time = ros::Time::now();
  counter = ros::Time::now();

  double angular_z_vel;

  while (ros::ok()) {
    current_time = ros::Time::now();
    dt = (current_time - last_time).toSec();

    if (got_ball && robot_status != 1) {
      if (robot_angle_from_goal != 0) {
        double output = PD_Controller(robot_angle_from_goal);
        if (output > 2) {
          output = 2;
        }

        if (output < -2) {
          output = -2;
        }

        if (output > 0 ) {
          cmdvel.angular.z = output;
        }
        else if (output < 0) {
          cmdvel.angular.z = output;
        }
        else {
          cmdvel.angular.z = 0;
        }
        dribling.d1pwm1 = 200;
        dribling.d1pwm2 = 0;
        dribling.d2pwm1 = 200;
        dribling.d2pwm2 = 0;
      }
      else {
        if (kicker_volt > 250) {
          kicker_msg.kick_pwm = 255;
        }
        cmdvel.angular.z = 0;
        dribling.d1pwm1 = 0;
        dribling.d1pwm2 = 0;
        dribling.d2pwm1 = 0;
        dribling.d2pwm2 = 0;
      }
      cmdvel.linear.x = 0.0;
      cmd_vel.publish(cmdvel);
    }
    else if (ball_detect && robot_status != 1) {
      double output = PD_Controller(ball_angle_from_frame);

      if (output > 0 ) {
        angular_z_vel = PD_Value * -1;
      }
      else if (output < 0) {
        angular_z_vel = PD_Value * -1;
      }
      else {
        angular_z_vel = 0;
      }

      if (angular_z_vel > 3) {
        angular_z_vel = 3;
      }

      if (angular_z_vel < -3) {
        angular_z_vel = -3;
      }

      if (ball_angle_from_frame < 45 && ball_angle_from_frame > -45) {
        if (ball_distance_from_frame > 100) {
          cmdvel.linear.x = 1.5;
        }
        else if (ball_distance_from_frame <= 100 && ball_distance_from_frame > 50) {
          cmdvel.linear.x = 0.75;
        }
        else if (ball_distance_from_frame <= 50) {
          if (ball_angle_from_frame < 20 && ball_angle_from_frame > -20) {
            cmdvel.linear.x = 0.35;
          }
        }
      }
      else {
	       cmdvel.linear.x = 0;
      }

      cmdvel.angular.z = angular_z_vel;
      cmd_vel.publish(cmdvel);
    }
    else {
      dribling.d1pwm1 = 0;
      dribling.d1pwm2 = 0;
      dribling.d2pwm1 = 0;
      dribling.d2pwm2 = 0;
    }

    /*if (ball_detect) {
      double output = PD_Controller();

      if (output > 0 ) {
        angular_z_vel = PD_Value * -1;
      }
      else if (output < 0) {
        angular_z_vel = PD_Value * -1;
      }
      else {
        angular_z_vel = 0;
      }

      if (angular_z_vel > 3) {
        angular_z_vel = 3;
      }

      if (angular_z_vel < -3) {
        angular_z_vel = -3;
      }

      if (ball_angle_from_frame < 45 && ball_angle_from_frame > -45) {
        if (ball_distance_from_frame > 100) {
          cmdvel.linear.x = 2.0;
        }
        else if (ball_distance_from_frame <= 100 && ball_distance_from_frame > 50) {
          cmdvel.linear.x = 1.0;
        }
        else if (ball_distance_from_frame <= 50 && ball_distance_from_frame > 20) {
          if (ball_angle_from_frame < 20 && ball_angle_from_frame > -20) {
            cmdvel.linear.x = 0.5;
          }
          else {
            cmdvel.linear.x = 0.0;
          }
        }
        else if (ball_distance_from_frame <= 20) {
          cmdvel.linear.x = 0.0;
        }
      }

      cmdvel.angular.z = angular_z_vel;
      cmd_vel.publish(cmdvel);
    }*/

    geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);

    geometry_msgs::TransformStamped bll_trans;
    bll_trans.header.stamp = current_time;
    bll_trans.header.frame_id = "base_link";
    bll_trans.child_frame_id = "base_laser_link";

    bll_trans.transform.translation.x = 0;
    bll_trans.transform.translation.y = 0;
    bll_trans.transform.translation.z = 0.2;
    bll_trans.transform.rotation = tf::createQuaternionMsgFromYaw(0);
    bll_broadcaster.sendTransform(bll_trans);

    geometry_msgs::TransformStamped bl_trans;
    bl_trans.header.stamp = current_time;
    bl_trans.header.frame_id = "base_footprint";
    bl_trans.child_frame_id = "base_link";

    bl_trans.transform.translation.x = 0;
    bl_trans.transform.translation.y = 0;
    bl_trans.transform.translation.z = 0.0;
    bl_trans.transform.rotation = tf::createQuaternionMsgFromYaw(0);
    bl_broadcaster.sendTransform(bl_trans);

    geometry_msgs::TransformStamped bf_trans;
    bf_trans.header.stamp = current_time;
    bf_trans.header.frame_id = "odom";
    bf_trans.child_frame_id = "base_footprint";

    bf_trans.transform.translation.x = x;
    bf_trans.transform.translation.y = y;
    bf_trans.transform.translation.z = 0.0;
    bf_trans.transform.rotation = odom_quat;
    bf_broadcaster.sendTransform(bf_trans);

    nav_msgs::Odometry odom;
    odom.header.stamp = current_time;
    odom.header.frame_id = "odom";

    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;

    odom.child_frame_id = "";
    odom.twist.twist.linear.x = vx;
    odom.twist.twist.linear.y = vy;
    odom.twist.twist.angular.z = vth;

    rostu_vel.publish(rostu_cmdvel);
    dribling_pub.publish(dribling);
    kicker_pub.publish(kicker_msg);

    kicker_msg.kick_pwm = 0;
    rostu_cmdvel.linear.x = 0;
    rostu_cmdvel.linear.y = 0;
    rostu_cmdvel.linear.z = 0;
    rostu_cmdvel.angular.x = 0;
    rostu_cmdvel.angular.y = 0;
    rostu_cmdvel.angular.z = 0;

    last_time = current_time;
    ros::spinOnce();
    r.sleep();
  }

  return 0;
}

